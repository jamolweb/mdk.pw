'use client'

import React, { ChangeEvent, FormEvent, useState } from 'react'
import { useRecoilState } from 'recoil'
import { toast } from 'sonner'
import languageState from '../../atoms/languageAtom'
import './style.css'

const translations = {
	en: {
		formTitle: 'Design Order Form',
		selectDesignType: 'Select Design Type',
		customDesignTypePlaceholder: 'Enter your custom design type',
		designTextPlaceholder: 'Enter your design text',
		colorPlaceholder: 'Enter your preferred color',
		designElementsPlaceholder: 'Enter design elements (e.g., car or character)',
		widthPlaceholder: 'Enter width (px, sm, vh)',
		heightPlaceholder: 'Enter height (px, sm, vh)',
		fileSizePlaceholder: 'Enter file size (MB, GB, TB)',
		additionalInfoPlaceholder: 'Additional information or suggestions',
		telegramUsernamePlaceholder: 'Enter your Telegram username',
		submitButton: 'Submit Order',
		successMessage: 'Your order has been successfully sent!',
		designTypes: [
			{ value: 'avatar', label: 'Avatar' },
			{ value: 'forum_design', label: 'Forum Thread Design' },
			{ value: 'music_video', label: 'Music Video' },
			{ value: 'promo_video', label: 'Promo Video' },
			{ value: 'banner', label: 'Banner' },
			{ value: 'logo', label: 'Logo' },
			{ value: 'other', label: 'Other' },
		],
	},
	ru: {
		formTitle: '–§–æ—Ä–º–∞ –∑–∞–∫–∞–∑–∞ –¥–∏–∑–∞–π–Ω–∞',
		selectDesignType: '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–∏–∑–∞–π–Ω–∞',
		customDesignTypePlaceholder: '–£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–∏–∑–∞–π–Ω–∞',
		designTextPlaceholder: '–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–∏–∑–∞–π–Ω–∞',
		colorPlaceholder: '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—ã–π —Ü–≤–µ—Ç',
		designElementsPlaceholder:
			'–í–≤–µ–¥–∏—Ç–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–∏–∑–∞–π–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –º–∞—à–∏–Ω–∞ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂)',
		widthPlaceholder: '–í–≤–µ–¥–∏—Ç–µ —à–∏—Ä–∏–Ω—É (px, sm, vh)',
		heightPlaceholder: '–í–≤–µ–¥–∏—Ç–µ –≤—ã—Å–æ—Ç—É (px, sm, vh)',
		fileSizePlaceholder: '–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ (–ú–ë, –ì–ë, –¢–ë)',
		additionalInfoPlaceholder: '–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏–ª–∏ —Å–æ–≤–µ—Ç—ã',
		telegramUsernamePlaceholder:
			'–û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π username –¥–ª—è —Å–≤—è–∑–∏ —á–µ—Ä–µ–∑ Telegram',
		submitButton: '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑',
		successMessage: '–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!',
		designTypes: [
			{ value: 'avatar', label: '–ê–≤–∞—Ç–∞—Ä–∫–∞' },
			{ value: 'forum_design', label: '–§–æ—Ä—É–º–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Ç–µ–º—ã' },
			{ value: 'music_video', label: '–ö–ª–∏–ø –ø–æ–¥ –º—É–∑—ã–∫—É' },
			{ value: 'promo_video', label: '–ü—Ä–æ–º–æ-—Ä–æ–ª–∏–∫' },
			{ value: 'banner', label: '–ë–∞–Ω–Ω–µ—Ä' },
			{ value: 'logo', label: '–õ–æ–≥–æ—Ç–∏–ø' },
			{ value: 'other', label: '–î—Ä—É–≥–æ–µ' },
		],
	},
}

const DesignOrderForm: React.FC = () => {
	const [formData, setFormData] = useState({
		designType: '',
		customDesignType: '',
		designText: '',
		color: '',
		designElements: '',
		width: '',
		height: '',
		fileSize: '',
		additionalInfo: '',
		telegramUsername: '',
	})
	const [selectedLanguage] = useRecoilState(languageState)

	const BOT_TOKEN = process.env.NEXT_PUBLIC_TELEGRAM_BOT_TOKEN
	const chat_id = 1832735702

	const sendToTelegramBot = async () => {
		const message = `
      üâê–ù–û–í–´–ô –ó–ê–ö–ê–ó –î–ò–ó–ê–ô–ù–êüâê:
      –¢–ò–ü –î–ò–ó–ê–ô–ù–ê: ${
				formData.designType === 'other'
					? formData.customDesignType
					: formData.designType
			}
      –¢–ï–ö–°–¢: ${formData.designText}
      –¶–í–ï–¢: ${formData.color}
      –≠–õ–ï–ú–ï–ù–¢–´ –î–ò–ó–ê–ô–ù–ê: ${formData.designElements}
      –†–ê–ó–ú–ï–†: ${formData.width}x${formData.height}
      –†–ê–ó–ú–ï–† –§–ê–ô–õ–ê: ${formData.fileSize || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}
      –î–û–ü –ò–ù–§–û–†–ú–ê–¶–ò–Ø: ${formData.additionalInfo}
      Telegram: ${formData.telegramUsername}
    `

		try {
			const response = await fetch(
				`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`,
				{
					method: 'POST',
					headers: {
						'Content-Type': 'application/json',
					},
					body: JSON.stringify({
						chat_id,
						text: message,
					}),
				}
			)

			if (!response.ok) {
				throw new Error('Failed to send message to Telegram')
			} else {
				toast.success(translations[selectedLanguage].successMessage)
			}
		} catch (error) {
			console.error('Error:', error)
			toast.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.')
		}
	}

	const handleInputChange = (
		e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>
	) => {
		const { name, value, type, selectedOptions }: any = e.target

		if (type === 'select-one') {
			setFormData(prev => ({
				...prev,
				[name]: selectedOptions[0].value,
			}))
		} else {
			setFormData(prev => ({
				...prev,
				[name]: value,
			}))
		}
	}

	const validateForm = (): boolean => {
		const errors: string[] = []

		if (!formData.designType)
			errors.push(translations[selectedLanguage].selectDesignType)
		if (formData.designType === 'other' && !formData.customDesignType.trim()) {
			errors.push(translations[selectedLanguage].customDesignTypePlaceholder)
		}
		if (!formData.designText.trim())
			errors.push(translations[selectedLanguage].designTextPlaceholder)
		if (!formData.color.trim())
			errors.push(translations[selectedLanguage].colorPlaceholder)
		if (!formData.designElements.trim())
			errors.push(translations[selectedLanguage].designElementsPlaceholder)
		if (!formData.width.trim() || !formData.height.trim())
			errors.push(translations[selectedLanguage].widthPlaceholder)
		if (!formData.additionalInfo.trim())
			errors.push(translations[selectedLanguage].additionalInfoPlaceholder)
		if (!formData.telegramUsername.trim())
			errors.push(translations[selectedLanguage].telegramUsernamePlaceholder)

		if (errors.length > 0) {
			errors.forEach(error => toast.error(error))
			return false
		}
		return true
	}

	const handleSubmit = (e: FormEvent<HTMLFormElement>) => {
		e.preventDefault()
		if (validateForm()) {
			sendToTelegramBot()
			setFormData({
				designType: '',
				customDesignType: '',
				designText: '',
				color: '',
				designElements: '',
				width: '',
				height: '',
				fileSize: '',
				additionalInfo: '',
				telegramUsername: '',
			})
		}
	}

	const t = translations[selectedLanguage]

	return (
		<form
			onSubmit={handleSubmit}
			className='max-w-full mx-auto mt-10 p-6 bg-[#191919] rounded-lg shadow-xl'
		>
			<h2 className='text-2xl font-bold mb-6 text-white'>{t.formTitle}</h2>

			<div className='mb-4'>
				<label className='block text-white mb-2'>{t.selectDesignType}</label>
				<select
					name='designType'
					value={formData.designType}
					onChange={handleInputChange}
					className={`w-full p-2 border rounded bg-[#222222] text-white`}
				>
					<option value='' disabled>
						{t.selectDesignType}
					</option>
					{t.designTypes.map(type => (
						<option key={type.value} value={type.value}>
							{type.label}
						</option>
					))}
				</select>
			</div>

			{formData.designType === 'other' && (
				<input
					type='text'
					name='customDesignType'
					value={formData.customDesignType}
					onChange={handleInputChange}
					placeholder={t.customDesignTypePlaceholder}
					className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
				/>
			)}

			<input
				type='text'
				name='designText'
				value={formData.designText}
				onChange={handleInputChange}
				placeholder={t.designTextPlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			/>

			<input
				type='text'
				name='color'
				value={formData.color}
				onChange={handleInputChange}
				placeholder={t.colorPlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			/>

			<input
				type='text'
				name='designElements'
				value={formData.designElements}
				onChange={handleInputChange}
				placeholder={t.designElementsPlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			/>

			<div className='flex gap-3'>
				<input
					type='text'
					name='width'
					value={formData.width}
					onChange={handleInputChange}
					placeholder={t.widthPlaceholder}
					className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
				/>

				<input
					type='text'
					name='height'
					value={formData.height}
					onChange={handleInputChange}
					placeholder={t.heightPlaceholder}
					className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
				/>
			</div>

			<input
				type='text'
				name='fileSize'
				value={formData.fileSize}
				onChange={handleInputChange}
				placeholder={t.fileSizePlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			/>

			<textarea
				name='additionalInfo'
				value={formData.additionalInfo}
				onChange={handleInputChange}
				placeholder={t.additionalInfoPlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			></textarea>

			<input
				type='text'
				name='telegramUsername'
				value={formData.telegramUsername}
				onChange={handleInputChange}
				placeholder={t.telegramUsernamePlaceholder}
				className={`w-full p-2 border rounded mb-4 bg-[#222222] text-white`}
			/>

			<button
				type='submit'
				className='w-full p-2 border rounded bg-[#E32879] text-white'
			>
				{t.submitButton}
			</button>
		</form>
	)
}

export default DesignOrderForm
